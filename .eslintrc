{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "useJSXTextNode": false
  },
  "plugins": ["react-hooks", "fp", "react"],
  "extends": [
    "plugin:promise/recommended",
    "standard",
    "standard-jsx",
    "plugin:@typescript-eslint/recommended"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    // disable due to conflict between prettier-standard and eslint-config-standard
    "indent": "off",
    // disable due to conflict between prettier-standard and eslint-config-standard-jsx
    "react/jsx-curly-newline": "off",
    // disable due to conflict between prettier-standard and eslint-config-standard-jsx
    "react/jsx-indent": "off",
    // override standard - allows function foo() {} instead of function foo () {}
    "space-before-function-paren": ["error", {
      "anonymous": "never",
      "named": "never",
      "asyncArrow": "always"
    }],
    "prefer-const": [
      "error",
      {
        "destructuring": "any",
        "ignoreReadBeforeAssign": false
      }
    ],
     // allows "e" for event, "_" for useless parameter
    "id-length": ["error", { "properties": "never", "exceptions": ["e", "_"] }],
    // override standard, allows using `my 'string'` instead of "my 'string'" or 'my \'string\''
    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],
    "no-else-return": "error",
    "no-shadow": "warn",
    // react-hooks
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    // react
    "react/jsx-fragments": ["warn", "element"],
    "react/jsx-closing-bracket-location": ["error", "line-aligned"],
    "react/no-multi-comp": ["error", { "ignoreStateless": true }],
    "react/sort-comp": [
      "error",
      {
        "order": [
          "static-methods",
          "instance-variables",
          "lifecycle",
          "getters",
          "setters",
          "/^on.+$/",
          "/^handle.+$/",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "componentDidUpdate",
            "componentWillUnmount"
          ],
          "rendering": ["/^render.+$/", "render"]
        }
      }
    ],
    "react/jsx-props-no-spreading": ["off", {
      "explicitSpread": "ignore",
      "html": "ignore"
    }],
    "react/display-name": ["error", { "ignoreTranspilerName": true }],
    // import
    "import/order": [
      "error",
      {
        "groups": [
          ["builtin", "external"],
          "internal",
          ["parent", "sibling", "index"]
        ],
        "newlines-between": "always"
      }
    ],
    // typescript
    "@typescript-eslint/no-unused-vars": ["error", { "ignoreRestSiblings": true }],
    "@typescript-eslint/array-type": ["error", { "default": "array" }],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/explicit-member-accessibility": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": false,
        "variables": false,
        "typedefs": false
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/member-delimiter-style": "off",
    /**
     * COMPLEXITY
     * Ensure small functions and no nested/callback hell.
     * If you need more, consider extracting some logic.
     * Also you have cool destructuring feature, use it.
     */
    // "complexity": ["warn", { "max": 5 }],
    "complexity": "off",
    "max-params": ["warn", 3],
    "max-statements": ["warn", 20],
    "max-statements-per-line": ["warn", { "max": 1 }],
    "max-nested-callbacks": ["warn", { "max": 3 }],
    "multiline-ternary": [0],
    "max-depth": ["warn", { "max": 3 }],
    "max-lines": [
      "error",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-lines-per-function": [
      "warn",
      {
        "max": 200,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "no-param-reassign": "warn",
    "no-invalid-this": "warn",
    "fp/no-mutating-methods": ["warn", {
      "allowedObjects": ["history"]
    }]
  },
  "overrides": [
    {
      "files": [ "*.test.ts?(x)" ],
      "rules": {
        "@typescript-eslint/no-empty-function": "off"
      }
    },
    {
      "files": [ "*.stories.ts?(x)" ],
      "rules": {
        "react/display-name": "off",
        "@typescript-eslint/no-explicit-any": "off"
      }
    }
  ],
  "env": {
    "jest": true
  },
  "globals": {
    "localStorage": true,
    "fetch": true
  }
}
